from aiogram import F, Router
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from utils.chat_type import ChatTypeFilter, IsAdmin
from kbds import admin_kb as kb
from database import request as rq




admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private']), IsAdmin())


ADMIN_BTNS = [
    '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
    '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä',
    '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
    '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
    '–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫ –∑–∞—à–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 
]


class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    category = State()
    image = State()

    edited_product = None

    state_desc ={
        'AddProduct:name':'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ',
        'AddProduct:description':'–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ',
        'AddProduct:price':'–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ',
        'AddProduct:category':'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ',
        'AddProduct:image':'-',
    }


@admin_router.message(Command('admin'))
async def admin_panel(message: Message):
    await message.answer('–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=kb.admin_btns(ADMIN_BTNS))


# FSM'–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_router.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä')  
async def edit_product(message: Message):
    await message.answer('–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–µ—Ç–µ –º–µ–Ω—è—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–≤–∞—Ä–∞\n–≤–≤–µ–¥–∏—Ç–µ " . " (—Ç–æ—á–∫—É)')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=await kb.admin_category())


@admin_router.message(F.text == '–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫ –∑–∞—à–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
async def back(message: Message):
    from handlers.user import cmd_start
    await cmd_start(message)




@admin_router.callback_query(F.data.startswith('edit_product_cat_'))  
async def edit_product2(callback: CallbackQuery):
    cat_id = int(callback.data.split('_')[-1])
    products = await rq.get_products(cat_id)

    for product in products:
        await callback.message.answer_photo(photo=product.image,
                                            caption=f'<b>{product.name}</b>\
                                            \n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{product.description}\
                                            \n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: {product.price}</b>'
                                            ,reply_markup=await kb.edit_btns(product.id))
        await callback.answer()


@admin_router.callback_query(StateFilter(None), F.data.startswith('product_for_edit_'))
async def edit_product3(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split('_')[-1])
    edited_product = await rq.get_product(product_id)
    
    AddProduct.edited_product = edited_product
    
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏',)
    await state.set_state(AddProduct.name)


@admin_router.callback_query(StateFilter(None), F.data.startswith('product_for_delete_'))
async def del_product(callback: CallbackQuery):
    del_id = int(callback.data.split('_')[-1])
    await rq.del_product(del_id)
    await callback.message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω üëç')
    await callback.answer()


# FSM'–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_router.message(StateFilter(None), F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')  
async def add_product(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(AddProduct.name)


#–û–¢–ú–ï–ù–ê
@admin_router.message(StateFilter('*'), Command('–æ—Ç–º–µ–Ω–∞'))
@admin_router.message(StateFilter('*'), F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_fsm(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state is None:
        return
    await state.clear()
    await message.answer('–û—Ç–º–µ–Ω–∞',reply_markup=kb.admin_btns(ADMIN_BTNS))


#–ù–ê–ó–ê–î
@admin_router.message(StateFilter('*'), Command('–Ω–∞–∑–∞–¥'))
@admin_router.message(StateFilter('*'), F.text.lower() == '–Ω–∞–∑–∞–¥')
async def step_back(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state == AddProduct.name:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    
    prev = None
    for step in AddProduct.__all_states__:
        if step.state == check_state:
            await state.set_state(prev)
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É,\n{AddProduct.state_desc[prev.state]}')
        prev = step


@admin_router.message(StateFilter(AddProduct.name), F.text)  
async def add_product(message: Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name = AddProduct.edited_product.name)
    else:
        await state.update_data(name = message.text)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(AddProduct.description)


@admin_router.message(StateFilter(AddProduct.name))
async def add_name2(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,\n–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ')


@admin_router.message(StateFilter(AddProduct.description), F.text)  
async def add_product(message: Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(description = AddProduct.edited_product.description)
    else:
        await state.update_data(description = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(AddProduct.price)


@admin_router.message(StateFilter(AddProduct.description))
async def add_name2(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,\n–≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ')


@admin_router.message(StateFilter(AddProduct.price), F.text)
async def add_product(message: Message, state: FSMContext):
    categories = await rq.get_categories()
    if message.text == '.':
        await state.update_data(price = AddProduct.edited_product.price)
    else:
        try:
            int(message.text)
        except ValueError:
            await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            return
        await state.update_data(price = message.text)
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n{"\n".join(sorted([str(c.id) +' - ' + c.name for c in categories]))}')
    await state.set_state(AddProduct.category)


@admin_router.message(StateFilter(AddProduct.price))
async def add_name2(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,\n–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ')


@admin_router.message(StateFilter(AddProduct.category), F.text)  
async def add_product(message: Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(category = AddProduct.edited_product.category)
    else:
        try:
            int(message.text)
        except ValueError:
            await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            return
        await state.update_data(category = message.text)
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(AddProduct.image)


@admin_router.message(StateFilter(AddProduct.category))
async def add_name2(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,\n–≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ')


@admin_router.message(StateFilter(AddProduct.image), or_f(F.photo, F.text == '.'))  
async def add_product(message: Message, state: FSMContext):
    if message.text and message.text == '.' and AddProduct.edited_product:
        await state.update_data(image = AddProduct.edited_product.image)
    else:
        await state.update_data(image = message.photo[-1].file_id)
    data = await state.get_data()
    if AddProduct.edited_product:
        await rq.edit_product(data, AddProduct.edited_product.id)
        await message.answer('–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ üëç')
    else:
        await rq.add_new_product(data)
        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ üëç')

    await state.clear()
    AddProduct.edited_product = None


@admin_router.message(StateFilter(AddProduct.image))
async def add_name2(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,\n–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ')


#–†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
class NewCategory(StatesGroup):
    category_name = State()

    category_for_edit = None


@admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def add_category(message:Message, state:FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await state.set_state(NewCategory.category_name)


@admin_router.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def edit_cat(message: Message):
    cats = await rq.get_categories()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
    for c in cats:
        await message.answer(f'{c.name}',reply_markup=await kb.edit_cats_btns(c.id))


@admin_router.callback_query(StateFilter(None), F.data.startswith('old_category_for_edit_'))
async def edit_category1(callback: CallbackQuery, state: FSMContext):
    cat_id = int(callback.data.split('_')[-1])
    category_for_edit = await rq.get_category(cat_id)
    NewCategory.category_for_edit = category_for_edit
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await state.set_state(NewCategory.category_name)   


@admin_router.callback_query(F.data.startswith('category_for_delete_'))
async def edit_category1(callback: CallbackQuery,):
    cat_id = int(callback.data.split('_')[-1])
    await rq.del_category(cat_id)
    await callback.answer()
    await callback.message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üëç')


@admin_router.message(StateFilter(NewCategory.category_name), F.text)
async def add_category2(message:Message, state:FSMContext):
    await state.update_data(category_name = message.text)
    data = await state.get_data()
    if NewCategory.category_for_edit:
        await rq.edit_category(data,NewCategory.category_for_edit.id)
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ üëç')
    else:
        await rq.add_category(data)
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üëç')

    await state.clear()
    NewCategory.category_for_edit = None